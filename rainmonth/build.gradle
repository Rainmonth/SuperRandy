apply plugin: 'com.android.application'
//apply plugin: 'kotlin-android'
apply plugin: 'com.alibaba.arouter'

// 默认版本号
ext.appVersionCode = 1
// 默认版本名
ext.appVersionName = "1.0.0"
// 默认release apk输出路径
ext.appReleaseDir = "/Users/RandyZhang/Documents/WorkFiles/SuperRandy/releaseApk"
// 默认debug apk输出路径
ext.appDebugDir = "/Users/RandyZhang/Documents/WorkFiles/SuperRandy/debugApk"
// 默认正式包后缀名
ext.appReleaseSuffixName = "_release.apk"
// 默认debug包后缀名
ext.appDebugSuffixName = "_debug.apk"
// 默认的名称
ext.appName = "SuperRandy"
// 默认备份apk目录
ext.bakApkDir = "/Users/RandyZhang/Documents/WorkFiles/SuperRandy/backApk"

def javaVersion = JavaVersion.VERSION_1_8
def dateTime = new Date().format("HH_mm_ss")

def loadProperties() {
    def proFile = file("release.properties")
    Properties pro = new Properties()
    proFile.withInputStream { stream ->
        pro.load(stream)
    }
    def dateDir = new Date().format("yyyy_MM_dd")
    appReleaseDir = pro.appReleaseDir + File.separator + dateDir
    appDebugDir = pro.appDebugDir + File.separator + dateDir
    appVersionCode = Integer.valueOf(pro.appVersionCode)
    appVersionName = pro.appVersionName
    appReleaseSuffixName = pro.appReleaseSuffixName
    appDebugSuffixName = pro.appDebugSuffixName
    appName = pro.appName
    bakApkDir = pro.bakApkDir + File.separator + dateDir
}

//加载信息
loadProperties()
android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }
    // recommend
    dexOptions {
        jumboMode true
    }

    signingConfigs {
        release {
            storeFile file("./keystore/release.jks")
            storePassword "zh7359431"
            keyAlias "SuperRandy"
            keyPassword "zh7359431"
        }
        debug {
            storeFile file("./keystore/debug.jks")
            storePassword "zh7359431"
            keyAlias "SuperRandy"
            keyPassword "zh7359431"
        }
    }

    defaultConfig {
        applicationId "com.rainmonth"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        // dex 突破65535限制
        multiDexEnabled true
        aaptOptions.cruncherEnabled = false
        aaptOptions.useNewCruncher = false
        flavorDimensions appVersionCode + ""
        // 指定Android使用的AndroidJUnitRunner
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [
                GETUI_APP_ID    : "ozDCiowuZa5h2IxPdiCtB",
                GETUI_APP_KEY   : "E35xIsmoim8YNTo6w46z98",
                GETUI_APP_SECRET: "XDS2Jyg7nW8pJiU1hJN196"
        ]
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
                // 应用ARouter必须添加的
                arguments = [moduleName: project.getName()]
            }
        }
    }

    lintOptions {
        abortOnError false
        ignoreWarnings true
    }

    productFlavors {
        mk10086 {}

        productFlavors.all { flavors ->
            flavors.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
        }
    }

    buildTypes {
        debug {
            // 显示log
            buildConfigField("boolean", "LOG_DEBUG", "true")
            versionNameSuffix "-debug"
            minifyEnabled false
            zipAlignEnabled true
            shrinkResources false
            signingConfig signingConfigs.debug
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('debug.apk')) {
                        if (variant.productFlavors[0] != null) {
                            def productFlavorsName = variant.productFlavors[0].name;
                            output.outputFileName = appName + "V${defaultConfig.versionName}." + "${dateTime}" + productFlavorsName + appDebugSuffixName

                        } else {
                            output.outputFileName = appName + "V${defaultConfig.versionName}." + "${dateTime}" + appDebugSuffixName
                        }
                    }
                }
            }
        }
        release {
            // 不显示log
            buildConfigField("boolean", "LOG_DEBUG", "false")
            // 控制是否进行混淆
            minifyEnabled true
            //
            zipAlignEnabled true
            // 移除无用的资源文件
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.release
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('release.apk')) {
                        if (variant.productFlavors[0] != null) {
                            def productFlavorsName = variant.productFlavors[0].name;
                            output.outputFileName = appName + "V${defaultConfig.versionName}." + "${dateTime}" + productFlavorsName + appReleaseSuffixName;
                        } else {
                            output.outputFileName = appName + "V${defaultConfig.versionName}." + "${dateTime}" + appReleaseSuffixName;
                        }
                    }

                }
            }
        }
    }

    packagingOptions {
        exclude 'META-INF/NOTICE' // will not include NOTICE file
        exclude 'META-INF/LICENSE' // will not include LICENSE file
        // as noted by @Vishnuvathsan you may also need to include
        // variations on the file name. It depends on your dependencies.
        // Some other common variations on notice and license file names
        exclude 'META-INF/notice'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license'
        exclude 'META-INF/license.txt'
        // 升级到Androidx后会提示duplicate entry: META-INF/services/javax.annotation.processing.Processor，这里将其排除
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
    dexOptions {
        javaMaxHeapSize "2048m"
    }
    // 解决com.android.builder.dexing.DexArchiveBuilderException
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
}

// 解决duplicate class的问题
configurations {
    all*.exclude group: 'com.android.support', module: 'support-v4'
}

rootProject.ext.merge.each { c ->
    project.dependencies.add("implementation", project.project(':component-' + c))
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation files('libs/GetuiSDK2.9.5.0.jar')
    api project(':common')
    api project(':magicindicator')
    //di
    annotationProcessor rootProject.ext.dependencies["dagger2-compiler"]
    annotationProcessor rootProject.ext.dependencies["butterknife-compiler"]
    annotationProcessor rootProject.ext.dependencies["router-compiler"]
    //可选，用于生成application类
    implementation("com.tencent.tinker:tinker-android-lib:${TINKER_VERSION}") { changing = true }
    //tinker的核心库
    compileOnly("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") { changing = true }
    annotationProcessor("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}")
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    // kotlin
//    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

