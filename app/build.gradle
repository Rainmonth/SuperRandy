apply plugin: 'com.android.application'

def debugTime(boolean isDirTime) {
    if (isDirTime) {
        return new Date().format("yyyy_MM_dd");
    } else {
        return new Date().format("HH_mm_ss")
    }
}

def releaseTime(boolean isDirTime) {
    if (isDirTime) {
        return new Date().format("yyyy_MM_dd");
    } else {
        return new Date().format("HH_mm_ss");
    }
}

// 默认版本号
ext.appVersionCode = 1
// 默认版本名
ext.appVersionName = "1.0.0"
// 默认release apk输出路径
ext.appReleaseDir = "/Users/RandyZhang/Documents/WorkFiles/SuperRandy/releaseApk"
// 默认debug apk输出路径
ext.appDebugDir = "/Users/RandyZhang/Documents/WorkFiles/SuperRandy/debugApk"
// 默认正式包后缀名
ext.appReleaseSuffixName = "_release.apk"
// 默认debug包后缀名
ext.appDebugSuffixName = "_debug.apk"
// 默认的名称
ext.appName = "SuperRandy"

def loadProperties() {
    def proFile = file("release.properties")
    Properties pro = new Properties()
    proFile.withInputStream { stream ->
        pro.load(stream)
    }
    appReleaseDir = pro.appReleaseDir + File.separator + releaseTime(true);
    appDebugDir = pro.appDebugDir + File.separator + debugTime(true);
    appVersionCode = Integer.valueOf(pro.appVersionCode)
    appVersionName = pro.appVersionName
    appReleaseSuffixName = pro.appReleaseSuffixName
    appDebugSuffixName = pro.appDebugSuffixName
    appName = pro.appName
}

//加载信息
loadProperties()

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.3"

    defaultConfig {
        applicationId "com.rainmonth"
        minSdkVersion 15
        targetSdkVersion 21
        versionCode appVersionCode
        versionName appVersionName
        // dex 突破65535限制
        multiDexEnabled true
        aaptOptions.cruncherEnabled = false
        aaptOptions.useNewCruncher = false

        manifestPlaceholders = [
                GETUI_APP_ID    : "ozDCiowuZa5h2IxPdiCtB",
                GETUI_APP_KEY   : "E35xIsmoim8YNTo6w46z98",
                GETUI_APP_SECRET: "XDS2Jyg7nW8pJiU1hJN196"
        ]
    }

    lintOptions {
        abortOnError false
        ignoreWarnings true;
    }

    productFlavors {
        mk10086 {}
        mk360 {}
        mk91 {}
        mkanzh {}
        mkaqy {}
        mkaz {}
        mkazs {}
        mkazy {}
        mkbd {}
        mkchuizi {}
        mkhw {}
        mkhx {}
        mkjf {}
        mkjinli {}
        mkkuan {}
        mkles {}
        mkliqu {}
        mklx {}
        mkmb {}
        mkmianfei {}
        mkmmy {}
        mkmz {}
        mknd {}
        mkoppo {}
        mksamsung {}
        mksg {}
        mksun {}
        mkuc {}
        mkuc1 {}
        mkvivo {}
        mkwdj {}
        mkwo {}
        mkwy {}
        mkxm {}
        mkyiyh {}
        mkyouyi {}
        mkyunos {}
        mkyyb {}
        mkyyb1 {}
        mkyyh {}
        mkyyjia {}
        mkzhuole {}
        mkzy {}
        "sc-6pc" {}
        "sc-qb" {}
        "sc-trj" {}
        "sc-ssj" {}
        productFlavors.all { flavors ->
            flavors.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
        }
    }

    buildTypes {
        debug {
            // 显示log
            buildConfigField("boolean", "LOG_DEBUG", "true")
            versionNameSuffix "-debug"
            minifyEnabled false
            zipAlignEnabled true
            shrinkResources false
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('debug.apk')) {
                        if (variant.productFlavors[0] != null) {
                            def productFlavorsName = variant.productFlavors[0].name;
                            def fileName = appName + "V${defaultConfig.versionName}.${debugTime(false)}" + productFlavorsName + appDebugSuffixName;
                            output.outputFile = new File(appDebugDir, fileName)
                        } else {
                            def fileName = appName + "V${defaultConfig.versionName}.${debugTime(false)}" + appDebugSuffixName;
                            output.outputFile = new File(appDebugDir, fileName);
                        }
                    }
                }
            }
        }
        release {
            // 不显示log
            buildConfigField("boolean", "LOG_DEBUG", "false")
            // 控制是否进行混淆
            minifyEnabled true
            //
            zipAlignEnabled true
            // 移除无用的资源文件
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.release
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('release.apk')) {
                        if (variant.productFlavors[0] != null) {
                            def productFlavorsName = variant.productFlavors[0].name;
                            def fileName = appName + "V${defaultConfig.versionName}.${releaseTime(false)}" + productFlavorsName + appReleaseSuffixName;
                            output.outputFile = new File(appReleaseDir, fileName)
                        } else {
                            def fileName = appName + "V${defaultConfig.versionName}.${releaseTime(false)}" + appReleaseSuffixName;
                            output.outputFile = new File(appReleaseDir, fileName);
                        }
                    }

                }
            }
        }
    }

    packagingOptions {
        exclude 'META-INF/NOTICE' // will not include NOTICE file
        exclude 'META-INF/LICENSE' // will not include LICENSE file
        // as noted by @Vishnuvathsan you may also need to include
        // variations on the file name. It depends on your dependencies.
        // Some other common variations on notice and license file names
        exclude 'META-INF/notice'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license'
        exclude 'META-INF/license.txt'
    }
    dexOptions {
        javaMaxHeapSize "2048m"
    }
}
dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile files('libs/GetuiSDK2.9.5.0.jar')
    compile 'com.android.support:design:24.2.1'
    compile 'com.android.support:support-v4:24.2.1'
    // ButterKnife
    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'com.android.support:multidex:1.0.1'
    // Retrofit
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'com.squareup.retrofit2:converter-gson:2.1.0'
    //    compile 'com.squareup.retrofit2:converter-jackson:2.1.0'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
    // RxJava and RxAndroid
    compile 'io.reactivex:rxandroid:1.2.1'
    compile 'io.reactivex:rxjava:1.1.6'
    // OkHttp
    compile 'com.squareup.okhttp3:okhttp:3.4.1'
    compile 'com.squareup.okio:okio:1.9.0'
    // KLog
    compile 'com.github.zhaokaiqiang.klog:library:1.5.0'
    compile 'com.readystatesoftware.systembartint:systembartint:1.0.3'
    compile project(':library')
    compile project(':magicindicator')
    compile files('libs/universal-image-loader-1.9.5.jar')
}
