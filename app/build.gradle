apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile files('libs/GetuiSDK2.9.5.0.jar')
    api project(':common')
    api project(':magicindicator')
    //可选，用于生成application类
    compile("com.tencent.tinker:tinker-android-lib:${TINKER_VERSION}") { changing = true }
    //tinker的核心库
    provided("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") { changing = true }
    annotationProcessor("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}")
    compile('com.android.support:multidex:1.0.1')
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

}

// 获取git 提交版本号，来设置TinkerID
def gitSha() {
    try {
        String gitRev = 'git rev-parse --short HEAD'.execute(null, project.rootDir).text.trim()
        if (gitRev == null) {
            throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
        }
        return gitRev
    } catch (Exception e) {
        throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
    }
}

// 默认版本号
ext.appVersionCode = 1
// 默认版本名
ext.appVersionName = "1.0.0"
// 默认release apk输出路径
ext.appReleaseDir = "/Users/RandyZhang/Documents/WorkFiles/SuperRandy/releaseApk"
// 默认debug apk输出路径
ext.appDebugDir = "/Users/RandyZhang/Documents/WorkFiles/SuperRandy/debugApk"
// 默认正式包后缀名
ext.appReleaseSuffixName = "_release.apk"
// 默认debug包后缀名
ext.appDebugSuffixName = "_debug.apk"
// 默认的名称
ext.appName = "SuperRandy"
// 默认备份apk目录
ext.bakApkDir = "/Users/RandyZhang/Documents/WorkFiles/SuperRandy/backApk"

def javaVersion = JavaVersion.VERSION_1_7
def dateTime = new Date().format("HH_mm_ss")

def loadProperties() {
    def proFile = file("release.properties")
    Properties pro = new Properties()
    proFile.withInputStream { stream ->
        pro.load(stream)
    }
    def dateDir = new Date().format("yyyy_MM_dd")
    appReleaseDir = pro.appReleaseDir + File.separator + dateDir
    appDebugDir = pro.appDebugDir + File.separator + dateDir
    appVersionCode = Integer.valueOf(pro.appVersionCode)
    appVersionName = pro.appVersionName
    appReleaseSuffixName = pro.appReleaseSuffixName
    appDebugSuffixName = pro.appDebugSuffixName
    appName = pro.appName
    bakApkDir = pro.bakApkDir + File.separator + dateDir
}

//加载信息
loadProperties()
android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }
    // recommend
    dexOptions {
        jumboMode true
    }

    signingConfigs {
        release {
            storeFile file("./keystore/release.jks")
            storePassword "zh7359431"
            keyAlias "SuperRandy"
            keyPassword "zh7359431"
        }
        debug {
            storeFile file("./keystore/debug.jks")
            storePassword "zh7359431"
            keyAlias "SuperRandy"
            keyPassword "zh7359431"
        }
    }

    defaultConfig {
        applicationId "com.rainmonth"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        // dex 突破65535限制
        multiDexEnabled true
        /**
         * buildConfig can change during patch!
         * we can use the newly value when patch
         */
        buildConfigField "String", "MESSAGE", "\"I am the base apk\""
//        buildConfigField "String", "MESSAGE", "\"I am the patch apk\""
        /**
         * client version would update with patch
         * so we can get the newly git version easily!
         */
        buildConfigField "String", "TINKER_ID", "\"${getTinkerIdValue()}\""
        buildConfigField "String", "PLATFORM", "\"all\""
        aaptOptions.cruncherEnabled = false
        aaptOptions.useNewCruncher = false
        flavorDimensions appVersionCode + ""

        manifestPlaceholders = [
                GETUI_APP_ID    : "ozDCiowuZa5h2IxPdiCtB",
                GETUI_APP_KEY   : "E35xIsmoim8YNTo6w46z98",
                GETUI_APP_SECRET: "XDS2Jyg7nW8pJiU1hJN196"
        ]
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
            }
        }
    }

    lintOptions {
        abortOnError false
        ignoreWarnings true
    }

    productFlavors {
        mk10086 {}

        productFlavors.all { flavors ->
            flavors.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
        }
    }

    buildTypes {
        debug {
            // 显示log
            buildConfigField("boolean", "LOG_DEBUG", "true")
            versionNameSuffix "-debug"
            minifyEnabled false
            zipAlignEnabled true
            shrinkResources false
            signingConfig signingConfigs.debug
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('debug.apk')) {
                        if (variant.productFlavors[0] != null) {
                            def productFlavorsName = variant.productFlavors[0].name;
                            output.outputFileName = appName + "V${defaultConfig.versionName}." + "${dateTime}" + productFlavorsName + appDebugSuffixName

                        } else {
                            output.outputFileName = appName + "V${defaultConfig.versionName}." + "${dateTime}" + appDebugSuffixName
                        }
                    }
                }
            }
        }
        release {
            // 不显示log
            buildConfigField("boolean", "LOG_DEBUG", "false")
            // 控制是否进行混淆
            minifyEnabled true
            //
            zipAlignEnabled true
            // 移除无用的资源文件
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.release
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('release.apk')) {
                        if (variant.productFlavors[0] != null) {
                            def productFlavorsName = variant.productFlavors[0].name;
                            output.outputFileName = appName + "V${defaultConfig.versionName}." + "${dateTime}" + productFlavorsName + appReleaseSuffixName;
                        } else {
                            output.outputFileName = appName + "V${defaultConfig.versionName}." + "${dateTime}" + appReleaseSuffixName;
                        }
                    }

                }
            }
        }
    }

    packagingOptions {
        exclude 'META-INF/NOTICE' // will not include NOTICE file
        exclude 'META-INF/LICENSE' // will not include LICENSE file
        // as noted by @Vishnuvathsan you may also need to include
        // variations on the file name. It depends on your dependencies.
        // Some other common variations on notice and license file names
        exclude 'META-INF/notice'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license'
        exclude 'META-INF/license.txt'
    }
    dexOptions {
        javaMaxHeapSize "2048m"
    }
}

/**
 * you can use assembleRelease to build you base apk
 * use tinkerPatchRelease -POLD_APK=  -PAPPLY_MAPPING=  -PAPPLY_RESOURCE= to build patch
 * add apk from the build/bakApk
 */
ext {
    //for some reason, you may want to ignore tinkerBuild, such as instant run debug build?
    tinkerEnabled = false

    //for normal build
    //old apk file to build patch apk
    tinkerOldApkPath = "${bakApkDir}/app-debug-0213-11-26-35.apk"
    //proguard mapping file to build patch apk
    tinkerApplyMappingPath = "${bakApkDir}/app-debug-1018-17-32-47-mapping.txt"
    //resource R.txt to build patch apk, must input if there is resource changed
    tinkerApplyResourcePath = "${bakApkDir}/app-debug-0213-11-26-35-R.txt"

    //only use for build all flavor, if not, just ignore this field
    tinkerBuildFlavorDirectory = "${bakApkDir}"
}


def getOldApkPath() {
    return hasProperty("OLD_APK") ? OLD_APK : ext.tinkerOldApkPath
}

def getApplyMappingPath() {
    return hasProperty("APPLY_MAPPING") ? APPLY_MAPPING : ext.tinkerApplyMappingPath
}

def getApplyResourceMappingPath() {
    return hasProperty("APPLY_RESOURCE") ? APPLY_RESOURCE : ext.tinkerApplyResourcePath
}

def getTinkerIdValue() {
    return hasProperty("TINKER_ID") ? TINKER_ID : gitSha()
}

def buildWithTinker() {
    return hasProperty("TINKER_ENABLE") ? TINKER_ENABLE : ext.tinkerEnabled
}

def getTinkerBuildFlavorDirectory() {
    return ext.tinkerBuildFlavorDirectory
}

if (buildWithTinker()) {
    apply plugin: 'com.tencent.tinker.patch'

    tinkerPatch {
        /**
         * necessary，default 'null'
         * the old apk path, use to diff with the new apk to build
         * add apk from the build/bakApk
         */
        oldApk = getOldApkPath()
        /**
         * optional，default 'false'
         * there are some cases we may get some warnings
         * if ignoreWarning is true, we would just assert the patch process
         * case 1: minSdkVersion is below 14, but you are using dexMode with raw.
         *         it must be crash when load.
         * case 2: newly added Android Component in AndroidManifest.xml,
         *         it must be crash when load.
         * case 3: loader classes in dex.loader{} are not keep in the main dex,
         *         it must be let tinker not work.
         * case 4: loader classes in dex.loader{} changes,
         *         loader classes is ues to load patch dex. it is useless to change them.
         *         it won't crash, but these changes can't effect. you may ignore it
         * case 5: resources.arsc has changed, but we don't use applyResourceMapping to build
         */
        ignoreWarning = false

        /**
         * optional，default 'true'
         * whether sign the patch file
         * if not, you must do yourself. otherwise it can't check success during the patch loading
         * we will use the sign config with your build type
         */
        useSign = true

        /**
         * optional，default 'true'
         * whether use tinker to build
         */
        tinkerEnable = buildWithTinker()

        /**
         * Warning, applyMapping will affect the normal android build!
         */
        buildConfig {
            /**
             * optional，default 'null'
             * if we use tinkerPatch to build the patch apk, you'd better to apply the old
             * apk mapping file if minifyEnabled is enable!
             * Warning:
             * you must be careful that it will affect the normal assemble build!
             */
            applyMapping = getApplyMappingPath()
            /**
             * optional，default 'null'
             * It is nice to keep the resource id from R.txt file to reduce java changes
             */
            applyResourceMapping = getApplyResourceMappingPath()

            /**
             * necessary，default 'null'
             * because we don't want to check the base apk with md5 in the runtime(it is slow)
             * tinkerId is use to identify the unique base apk when the patch is tried to apply.
             * we can use git rev, svn rev or simply versionCode.
             * we will gen the tinkerId in your manifest automatic
             */
            tinkerId = getTinkerIdValue()

            /**
             * if keepDexApply is true, class in which dex refer to the old apk.
             * open this can reduce the dex diff file size.
             */
            keepDexApply = false
        }

        dex {
            /**
             * optional，default 'jar'
             * only can be 'raw' or 'jar'. for raw, we would keep its original format
             * for jar, we would repack dexes with zip format.
             * if you want to support below 14, you must use jar
             * or you want to save rom or check quicker, you can use raw mode also
             */
            dexMode = "jar"

            /**
             * necessary，default '[]'
             * what dexes in apk are expected to deal with tinkerPatch
             * it support * or ? pattern.
             */
            pattern = ["classes*.dex",
                       "assets/secondary-dex-?.jar"]
            /**
             * necessary，default '[]'
             * Warning, it is very very important, loader classes can't change with patch.
             * thus, they will be removed from patch dexes.
             * you must put the following class into main dex.
             * Simply, you should add your own application {@code tinker.sample.android.SampleApplication}
             * own tinkerLoader, and the classes you use in them
             *
             */
            loader = [
                    //use sample, let BaseBuildInfo unchangeable with tinker
                    "tinker.sample.android.app.BaseBuildInfo"
            ]
        }

        lib {
            /**
             * optional，default '[]'
             * what library in apk are expected to deal with tinkerPatch
             * it support * or ? pattern.
             * for library in assets, we would just recover them in the patch directory
             * you can get them in TinkerLoadResult with Tinker
             */
            pattern = ["lib/*/*.so"]
        }

        res {
            /**
             * optional，default '[]'
             * what resource in apk are expected to deal with tinkerPatch
             * it support * or ? pattern.
             * you must include all your resources in apk here,
             * otherwise, they won't repack in the new apk resources.
             */
            pattern = ["res/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]

            /**
             * optional，default '[]'
             * the resource file exclude patterns, ignore add, delete or modify resource change
             * it support * or ? pattern.
             * Warning, we can only use for files no relative with resources.arsc
             */
            ignoreChange = ["assets/sample_meta.txt"]

            /**
             * default 100kb
             * for modify resource, if it is larger than 'largeModSize'
             * we would like to use bsdiff algorithm to reduce patch file size
             */
            largeModSize = 100
        }

        packageConfig {
            /**
             * optional，default 'TINKER_ID, TINKER_ID_VALUE' 'NEW_TINKER_ID, NEW_TINKER_ID_VALUE'
             * package meta file gen. path is assets/package_meta.txt in patch file
             * you can use securityCheck.getPackageProperties() in your ownPackageCheck method
             * or TinkerLoadResult.getPackageConfigByName
             * we will get the TINKER_ID from the old apk manifest for you automatic,
             * other config files (such as patchMessage below)is not necessary
             */
            configField("patchMessage", "tinker is sample to use")
            /**
             * just a sample case, you can use such as sdkVersion, brand, channel...
             * you can parse it in the SamplePatchListener.
             * Then you can use patch conditional!
             */
            configField("platform", "all")
            /**
             * patch version via packageConfig
             */
            configField("patchVersion", "1.0")
        }
        //or you can add config filed outside, or get meta value from old apk
        //project.tinkerPatch.packageConfig.configField("test1", project.tinkerPatch.packageConfig.getMetaDataFromOldApk("Test"))
        //project.tinkerPatch.packageConfig.configField("test2", "sample")

        /**
         * if you don't use zipArtifact or path, we just use 7za to try
         */
        sevenZip {
            /**
             * optional，default '7za'
             * the 7zip artifact path, it will use the right 7za with your platform
             */
            zipArtifact = "com.tencent.mm:SevenZip:1.1.10"
            /**
             * optional，default '7za'
             * you can specify the 7za path yourself, it will overwrite the zipArtifact value
             */
//        path = "/usr/local/bin/7za"
        }
    }

    List<String> flavors = new ArrayList<>();
    project.android.productFlavors.each { flavor ->
        flavors.add(flavor.name)
    }
    boolean hasFlavors = flavors.size() > 0
    /**
     * bak apk and mapping
     */
    android.applicationVariants.all { variant ->
        /**
         * task type, you want to bak
         */
        def taskName = variant.name

        tasks.all {
            if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {
                it.doLast {
                    copy {
                        // 命名前缀 app-mk10086
                        def fileNamePrefix = "${project.name}-${variant.baseName}"
                        // 新命名前缀 hasFlavors = true ? app-mk10086 : app-mk10086-10_37_26
                        def newFileNamePrefix = hasFlavors ? "${fileNamePrefix}" : "${fileNamePrefix}-${dateTime}"
                        // bakApkDir = "/Users/RandyZhang/Documents/WorkFiles/SuperRandy/backApk"
                        def destPath = hasFlavors ? file(bakApkDir + "/${variant.flavorName}") : bakApkDir
                        from variant.outputs.outputFile
                        into destPath
                        rename { String fileName ->
                            fileName.replace("${fileNamePrefix}.apk", "${newFileNamePrefix}.apk")
                        }

                        from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("mapping.txt", "${newFileNamePrefix}-mapping.txt")
                        }

                        from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("R.txt", "${newFileNamePrefix}-R.txt")
                        }
                    }
                }
            }
        }
    }
    project.afterEvaluate {
        //sample use for build all flavor for one time
        if (hasFlavors) {
            task(tinkerPatchAllFlavorRelease) {
                // 所属task任务组
                group = 'tinker'
                // 原始旧渠道文件路径
                def originOldPath = getTinkerBuildFlavorDirectory()
                for (String flavor : flavors) {
                    // 通过渠道名称获取渠道对应的task
                    def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Release")
                    dependsOn tinkerTask
                    // 定义预处理任务（即在开始构建渠道任务之前对开启相应task对任务做一些显示方面的处理）
                    def preAssembleTask = tasks.getByName("process${flavor.capitalize()}ReleaseManifest")
                    preAssembleTask.doFirst {
                        // 获取格式化的渠道名，每个渠道文件夹下对应三个文件：渠道名-release.apk、渠道名-release-mapping.txt、渠道名-release-R.txt
                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 15)
                        project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release.apk"
                        project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-mapping.txt"
                        project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-R.txt"

                    }

                }
            }

            task(tinkerPatchAllFlavorDebug) {
                // 所属task任务组
                group = 'tinker'
                // 原始旧渠道文件路径 bakApkDir + "/${variant.flavorName}
                def originOldPath = getTinkerBuildFlavorDirectory()
                for (String flavor : flavors) {
                    // 通过渠道名称获取渠道对应的task
                    def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Debug")
                    dependsOn tinkerTask
                    // 定义预处理任务（即在开始构建渠道任务之前对开启相应task对任务做一些显示方面的处理）
                    def preAssembleTask = tasks.getByName("process${flavor.capitalize()}DebugManifest")
                    preAssembleTask.doFirst {
                        // 获取格式化的渠道名，每个渠道文件夹下对应三个文件：渠道名-debug.apk、渠道名-debug-mapping.txt、渠道名-debug-R.txt
                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 13)
                        project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug.apk"
                        project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-mapping.txt"
                        project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-R.txt"
                    }

                }
            }
        }
    }
}

repositories {
    mavenCentral()
}

