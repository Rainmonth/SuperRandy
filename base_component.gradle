// 基本组件的配置信息
// 获取组件名
def componentName = project.getName().replaceAll("component-", "")
// 是否独立运行
def isRunAlone = !rootProject.ext.merge.contains(componentName)
if (isRunAlone) {
    apply plugin: "com.android.application"
} else {
    apply plugin: "com.android.library"
}

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        if (isRunAlone) {
            applicationId rootProject.ext.android.organization + "." + componentName
            multiDexEnabled true
        }
        javaCompileOptions {
            annotationProcessorOptions {
//                includeCompileClasspath true
                arguments = [moduleName: project.getName()]
            }
        }
        versionCode 1
        versionName "1.0.0"
        resourcePrefix componentName + "_"
        resValue "string", componentName + "_module_name", project.getName()
    }
    if (isRunAlone) {// 如果独立运行的话
        sourceSets {
            main {
                // 指定AndroidManifest.xml文件
                manifest.srcFile 'src/main/runalone/AndroidManifest.xml'
                // 指定Java源文件
                java.srcDirs = ['src/main/java', 'src/main/runalone/java']
                // 指定资源文件
                res.srcDirs = ['src/main/res', 'src/main/runalone/java']
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    android {
        lintOptions {
            abortOnError false
        }
    }

    // 配置组件项目依赖
    dependencies {
        implementation project(':common')
    }
}